{"mappings":"ACEA,SAAS,gBAAgB,CAAC,QAAS,SAAC,CAApC,EACE,EAAE,cAAc,GAEhB,IAAM,EAAO,SAAS,aAAa,CAAC,SAC9B,EAAS,SAAS,aAAa,CAAC,WAEhC,EAAW,EAAK,qBAAqB,GACrC,EAAa,EAAO,qBAAqB,GACzC,EAAc,SAAS,iBAAiB,GAAM,WAAW,EAE/D,GACE,CAAA,CAAA,EAAE,OAAO,CAAG,EAAS,IAAI,AAAJ,IACrB,CAAA,EAAE,OAAO,CAAG,EAAS,KAAK,AAAL,IACrB,CAAA,EAAE,OAAO,CAAG,EAAS,GAAG,AAAH,IACrB,CAAA,EAAE,OAAO,CAAG,EAAS,MAAM,AAAN,GAMvB,IAAI,EAAU,EAAE,OAAO,CAAG,EAAS,IAAI,CAAG,EAAW,KAAK,CAAG,EAAI,EAC7D,EAAS,EAAE,OAAO,CAAG,EAAS,GAAG,CAAG,EAAW,MAAM,CAAG,EAAI,CAG5D,CAAA,EAAU,EACZ,EAAU,EACD,EAAU,EAAW,KAAK,CAAG,EAAS,KAAK,CAAG,EAAI,GAC3D,CAAA,EAAU,EAAS,KAAK,CAAG,EAAI,EAAc,EAAW,KAAK,AAAL,EAGtD,EAAS,EACX,EAAS,EACA,EAAS,EAAW,MAAM,CAAG,EAAS,MAAM,CAAG,EAAI,GAC5D,CAAA,EAAS,EAAS,MAAM,CAAG,EAAI,EAAc,EAAW,MAAM,AAAN,EAG1D,EAAO,KAAK,CAAC,IAAI,CAAG,GAAW,MAAA,CAAR,EAAQ,MAC/B,EAAO,KAAK,CAAC,GAAG,CAAG,GAAU,MAAA,CAAP,EAAO,MAC/B","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\ndocument.addEventListener(\"click\", function(e) {\n    e.preventDefault();\n    var wall = document.querySelector(\".wall\");\n    var spider = document.querySelector(\".spider\");\n    var wallRect = wall.getBoundingClientRect();\n    var spiderRect = spider.getBoundingClientRect();\n    var borderWidth = parseInt(getComputedStyle(wall).borderWidth);\n    if (e.clientX < wallRect.left || e.clientX > wallRect.right || e.clientY < wallRect.top || e.clientY > wallRect.bottom) return; // Do nothing if clicked outside the wall\n    // Calculate new position for spider, centered on the cursor\n    var newLeft = e.clientX - wallRect.left - spiderRect.width / 2 - borderWidth;\n    var newTop = e.clientY - wallRect.top - spiderRect.height / 2 - borderWidth;\n    // Ensure the spider does not move outside the wall\n    if (newLeft < 0) newLeft = 0;\n    else if (newLeft + spiderRect.width > wallRect.width - 2 * borderWidth) newLeft = wallRect.width - 2 * borderWidth - spiderRect.width;\n    if (newTop < 0) newTop = 0;\n    else if (newTop + spiderRect.height > wallRect.height - 2 * borderWidth) newTop = wallRect.height - 2 * borderWidth - spiderRect.height;\n    spider.style.left = \"\".concat(newLeft, \"px\");\n    spider.style.top = \"\".concat(newTop, \"px\");\n});\n\n//# sourceMappingURL=index.ca397edc.js.map\n","'use strict';\n\ndocument.addEventListener('click', (e) => {\n  e.preventDefault();\n\n  const wall = document.querySelector('.wall');\n  const spider = document.querySelector('.spider');\n\n  const wallRect = wall.getBoundingClientRect();\n  const spiderRect = spider.getBoundingClientRect();\n  const borderWidth = parseInt(getComputedStyle(wall).borderWidth);\n\n  if (\n    e.clientX < wallRect.left ||\n    e.clientX > wallRect.right ||\n    e.clientY < wallRect.top ||\n    e.clientY > wallRect.bottom\n  ) {\n    return; // Do nothing if clicked outside the wall\n  }\n\n  // Calculate new position for spider, centered on the cursor\n  let newLeft = e.clientX - wallRect.left - spiderRect.width / 2 - borderWidth;\n  let newTop = e.clientY - wallRect.top - spiderRect.height / 2 - borderWidth;\n\n  // Ensure the spider does not move outside the wall\n  if (newLeft < 0) {\n    newLeft = 0;\n  } else if (newLeft + spiderRect.width > wallRect.width - 2 * borderWidth) {\n    newLeft = wallRect.width - 2 * borderWidth - spiderRect.width;\n  }\n\n  if (newTop < 0) {\n    newTop = 0;\n  } else if (newTop + spiderRect.height > wallRect.height - 2 * borderWidth) {\n    newTop = wallRect.height - 2 * borderWidth - spiderRect.height;\n  }\n\n  spider.style.left = `${newLeft}px`;\n  spider.style.top = `${newTop}px`;\n});\n"],"names":["document","addEventListener","e","preventDefault","wall","querySelector","spider","wallRect","getBoundingClientRect","spiderRect","borderWidth","parseInt","getComputedStyle","clientX","left","right","clientY","top","bottom","newLeft","width","newTop","height","style","concat"],"version":3,"file":"index.ca397edc.js.map"}